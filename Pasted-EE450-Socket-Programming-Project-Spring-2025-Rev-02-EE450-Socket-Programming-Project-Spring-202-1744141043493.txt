EE450 Socket Programming Project, Spring 2025

Rev. 02

EE450 Socket Programming Project, Spring 2025
Due Date: Sunday, April 27th, 2025, 11:59 PM (Midnight)
(The deadline is the same for all on-campus and DEN off-campus students)
Hard Deadline (Strictly enforced)

OBJECTIVE:

The objective of this assignment is to familiarize you with UNIX socket programming. [cite: 293, 294] It is an
individual assignment, and no collaborations are allowed. Any cheating will result in an
automatic F in the course (not just in the assignment). [cite: 294]
If you have any doubts/questions, post your questions on Piazza. You must discuss all project-related
issues on Piazza. [cite: 295, 296] We will give extra points to those who actively help others out by answering
questions on Piazza. [cite: 296]
PROBLEM STATEMENT:

Stock trading, the practice of buying and selling shares of publicly traded companies, is a cornerstone of the
global financial system. [cite: 297, 298, 299] A reliable and efficient trading system is an important part of the process. [cite: 298, 299] We are
designing a simplified program to simulate a stock trading system. [cite: 299, 300] This system will feature basic user
authentication, record trading information, and user positions, and provide real-time stock quotes to users. [cite: 300, 301, 302, 303, 304] For
simplicity, this system assumes that:

1.  Users can only sell the quantity of stocks they currently own, ensuring they cannot sell stocks they do
    not have. [cite: 301, 302]
2.  Users have unlimited buying power (cash) to purchase any stock. [cite: 302, 303]
3.  An unlimited supply of stocks is available in the market for users to buy at any time. [cite: 303, 304]
4.  All transactions occur at the market price. [cite: 304]

Given the critical importance of user security, the system will encrypt passwords at client side during login,
ensuring a secure, reliable, and user-friendly trading environment. [cite: 304, 305, 306, 307] In this project, we need three backend servers: Server A, Server P, and Server Q, one main server: Server M,
and client interfaces. [cite: 305, 306, 307] Users will be able to perform various operations through the client interface, and these
operations will be forwarded to the corresponding backend servers via the main server. [cite: 306, 307] Here are the functional
descriptions of each server and client.

•   Client: This is the only interface for user interaction. [cite: 307, 308, 309] Through the client terminal, every member can
    perform actions listed below:

1

--- PAGE 2 ---

EE450 Socket Programming Project, Spring 2025

Rev. 02

log in

view stock quotes

buy and sell stocks

0 check their own positions

close the connection (log out)

•   Server M (Main): Handles all member actions by dispatching requests to the appropriate backend
    servers. [cite: 310] Additionally, all communications between the three backend servers must go through Server
    M.

•   Server A (Authentication): Verifies users' usernames and encrypted passwords and returns whether they
    are valid. [cite: 311, 312] It uses "members.txt" as its database.

•   Server P (Portfolio): Records users' holdings and their current total profit and loss. [cite: 312, 313] It uses
    "portfolios.txt" as its database.

•   Server Q (Quote): Provides the current price of each stock. [cite: 313] It uses "quotes.txt" as its database.

Server A

(Authentication)

members.txt

(username) (encrypted password)
(username2) (encrypted password)

Member#1

UDP

</>

TCP

Server M
(Main)

UDP

(Portfolio)

Available commands:

Member #2

>quote <stock name>

> quote

</>

TCP

>buy <stock name> <number of shares>

> sell <stock name> <number of shares>

> position

> exit

Server P

portfolios.txt

(username1)

(stock1) (number of shares) (avg buy price)
(stock2) (number of shares) (avg buy price)
(username2)

(stock1) (number of shares) (avg buy price),
(stock2) (number of shares) (avg buy price)

UDP

TCP

Server Q
(Quote)

Member #n

quotes.txt

(stock1) (price@time0)... (price@time9)
(stock2) (price@time0)... (price@time9)

Source Code Files

Your implementation should include the source code files described below, for each component of the system:

Client: The name of this piece of code must be 'client.c' or 'client.cpp (all in lowercase). [cite: 314, 315, 316, 317, 318, 319, 320, 321, 322] The header file (if
you have one; it is not mandatory) must be called 'client.h (all in lowercase). [cite: 314, 315, 316, 317, 318, 319, 320, 321, 322]
serverM (Main Server): You must name your code file: 'serverM.c' or 'serverM.cpp` (all lowercase
except for the 'M'). [cite: 314, 315, 316, 317, 318, 319, 320, 321, 322] If you have a header file, it must be named 'serverM.h (all lowercase except for the  M'). [cite: 314, 315, 316, 317, 318, 319, 320, 321, 322]
-   Backend Servers A, P, Q: You are required to create three distinct files, choosing from the following naming
    conventions: server#.c or server#.cpp. [cite: 314, 315, 316, 317, 318, 319, 320, 321, 322] The filename must utilize one of these formats, substituting "#" with the
    specific server identifier (either "A" or "P" or <span class="math-inline">"Q"</span>) to reflect the server it represents, resulting in filenames like

2

--- PAGE 3 ---

EE450 Socket Programming Project, Spring 2025

Rev. 02

serverA.c, serverA.cpp, serverP.c, or serverP.cpp (note that the name should be entirely in lowercase except for
the letter replacing "#"). [cite: 319, 320, 321, 322, 323] If available, you should also include a corresponding header file named server#.h,
adhering to the same naming rule for the "#" replacement. [cite: 319, 320, 321, 322, 323] This ensures a clear, organized naming structure for
your code and its associated header file, if any. [cite: 319, 320, 321, 322, 323]
Note: You are not allowed to use one executable for all four servers (i.e. a "fork" based implementation). [cite: 322, 323]
-   Optional files: You may also include additional files that you write yourself with common functions, using
    .c, .cpp, or .h extensions. [cite: 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339]
Input Files:

members.txt: Located in Server A (Authentication server) which maintains the user credentials. [cite: 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339] The
format of this file consists of two columns, usernames and encrypted passwords. A space separates
these columns. [cite: 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339] Each user's data is stored on a separate, new line. This is used for authentication
purposes. [cite: 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339]
•   portfolios.txt: Structured to list members and their stock portfolios. [cite: 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339] Each member is identified by a line
with their name (e.g., usernamel), followed by multiple lines representing the stocks they own. [cite: 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339] Each
stock line contains the stock name, the number of shares owned (as an integer), and the average buy
price (as a decimal or floating-point number), separated by spaces. [cite: 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339] This pattern repeats for every
member, with no blank lines between entries. [cite: 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339]
•   quotes.txt: It contains ten prices for each stock, representing different points in time as the system
    progresses. [cite: 331, 332, 333, 334, 335, 336, 337, 338, 339] Whenever any client (member) retrieves a stock quote from Server Q using the "buy," or
    "sell" command, the system advances only the price of the stock involved in the "buy" or "sell"
    order to the next price in the sequence after each "buy" or "sell" (even if the buy or sell fails or is
    denied by the user). [cite: 331, 332, 333, 334, 335, 336, 337, 338, 339] If the end of the price list is reached, it loops back to the beginning. [cite: 331, 332, 333, 334, 335, 336, 337, 338, 339]
    For example, consider the following line in quotes.txt:

S1 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0

At time 0- the program starts, the price for stock S1 is \$100.0. [cite: 334, 335, 336, 337, 338, 339]
At time 1-after the 1st buy/sell command, the price of stock S1 is \$101.0, but the first buy/sell
was executed at \$100.0. [cite: 334, 335, 336, 337, 338, 339]
At time 9-after the 9th buy/sell command, the price is \$109.0. [cite: 334, 335, 336, 337, 338, 339]
At time 10 after the 10th buy/sell command, the sequence restarts, and the price returns to
\$100.0. [cite: 334, 335, 336, 337, 338, 339]
At time 11 after the 11th buy/sell command, the price is \$101.0. [cite: 334, 335, 336, 337, 338, 339]
Note: The length of a stock name is no greater than 5. [cite: 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349]

3

--- PAGE 4 ---

EE450 Socket Programming Project, Spring 2025

DETAILED EXPLANATION

Rev. 02

Please refer to the following order to start your programs: server M, server A, server P, server Q, and then
multiple Clients. [cite: 340, 341, 342, 343, 344, 345, 346, 347, 348, 349] Your programs must start in this order. Each of the servers and the clients have boot-up
messages that must be printed on the screen. [cite: 340, 341, 342, 343, 344, 345, 346, 347, 348, 349] Please refer to the on-screen messages section for further
information.

When three backend servers (server A, server P, and server Q) are up and running, each backend server should
read the corresponding input file (members.txt, portfolios.txt, and quotes.txt) and store the information in a
certain data structure. [cite: 342, 343, 344, 345, 346, 347, 348, 349] You can choose any data structure that accommodates your needs. [cite: 342, 343, 344, 345, 346, 347, 348, 349] The communication
between the backend servers and the main server (server M) should be via UDP over the port mentioned in the
PORT NUMBER ALLOCATION section. [cite: 342, 343, 344, 345, 346, 347, 348, 349] In the following phases, you have to make sure that the correct
backend server is being contacted by the main server for corresponding requests. [cite: 342, 343, 344, 345, 346, 347, 348, 349] You should print correct
on-screen messages onto the screen for the main server and the backend servers, indicating the success of these
operations as described in the "ON-SCREEN MESSAGES" section. [cite: 342, 343, 344, 345, 346, 347, 348, 349]
After the servers are booted up and the required pieces of information are stored on the backend servers, at
least TWO clients will be started over TCP connections. [cite: 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] Once the clients boot up and the initial boot-up
messages are printed, the clients wait for the system to check the authentication and then enter the stock trading
system. [cite: 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] Please check on-screen messages for the on-screen messages of different events on each server and client side. [cite: 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372]
Phase 2: Login and confirmation

In this phase, the clients will be asked to enter their username and unencrypted password into the terminal. [cite: 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] A
member can be authenticated by inputting the member's username and unencrypted password. [cite: 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] The client will
send this information to the main server. The main server will then encrypt the password. [cite: 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] Then, the main
server would send the encrypted credentials (only the password would be encrypted) to serverA for
authentication. [cite: 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] The encryption scheme for member authentication would be as follows:

•   Offset each character and/or digit by 3.

•    character: cyclically alphabetic <span class="math-inline">\(A\-Z,a\-z\)</span> update for overflow

•    digit: cyclically 0-9 update for overflow

The scheme is case-sensitive. [cite: 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372]
•   Special characters (including spaces and/or the decimal point) will not be encrypted or changed. [cite: 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372]
    A few examples of encryption are given below:

4

--- PAGE 5 ---

EE450 Socket Programming Project, Spring 2025

The following table:
"Example
","Original Text
","Encrypted Text
"
"#1
","Welcome to EE450!
","Zhofrph wr HH783!
"
"#2
","199xyz@\$
","422abc@\$
"
"#3
","0.27#&
","3.50#&
"

Rev. 02

Constraints:

The username is case-insensitive and will be converted to lowercase (1~50 chars).
The password will be case-sensitive (1~50 chars). [cite: 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372]
Phase 2A:

A member client sends the authentication request to the main server over a TCP connection. [cite: 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] Upon running the
client using the following command, the user will be prompted to enter the username and password. [cite: 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372] This
unencrypted information will be sent to the main server over TCP. The main server will then encrypt the
password.

The following table:
"./client
"
"(Please refer to the on-screen messages)
"
"[Client] Logging in.
"
"Please enter the username: <username>
"
"Please enter the password: <unencrypted_password>
"

Phase 2B:

ServerA receives the username and encrypted password from the client via the main server. [cite: 364, 365, 366, 367, 368, 369, 370, 371, 372] ServerA compares
the username and encrypted password with the data in its database (BootUp phase) and sends the result of the
authentication to the main server. [cite: 364, 365, 366, 367, 368, 369, 370, 371, 372] Then the main server sends the result of the authentication request to the
client over a TCP connection. [cite: 364, 365, 366, 367, 368, 369, 370, 371, 372]
If the login information was not correct/found:

The following table:
"./client
"
"(Please refer to the on-screen messages)
"
"[Client] The credentials are incorrect. Please try again.
"
"Please enter the username: <username>
"
"Please enter the password: <unencrypted_password>
"

After the successful login:

[Client] You have been granted access.

5

--- PAGE 6 ---

EE450 Socket Programming Project, Spring 2025

Rev. 02

Please note that both clients should be connected to the main server and if authenticated, they both can
quote/buy/sell/ the stocks or check position as explained in the following phases. [cite: 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584]
Phase 3: Trading (quote/buy/sell)

Once authenticated, the client should be able to check stock prices and buy or sell the stocks.